#include <core/pch.hpp>
#include <core/noncopyable.hpp>

#include <suffixarray/suffixarray.hpp>
#include <permutation/permutation.hpp>

#include <string/strings.hpp>

#include <graph/graph.hpp>

#include <sorting/merge.hpp>
#include <sorting/insertion.hpp>

#include <sorting/topological.hpp>


USINGNAMESPACE(algorithms)

void test_suffix_array();
void test_permutation();
void test_strings();
void test_merge_sort();
void test_insertion_sort();
void test_topological_sort();

int main()
{
    test_topological_sort();
    test_insertion_sort();
    test_merge_sort();
    test_strings();
    test_suffix_array();
    test_permutation();
}

void test_strings()
{
    struct sa_traits
    {
        static int abc_size()
        {
            return 255;
        }
    };

    using traits_type = sa_traits;

    using strings_type = strings<char_type,traits_type>;

    //string_type str(L"ABRACADABRA");
    //string_type str
    string_type str

    std::wcout << str << L":" << str.size() << std::endl;

    string_type substr;

    int total = 0;

    for(;;)
    {
        //std::wcout << str << L":" << str.size() << std::endl;

        std::vector<char_type> s(str.begin(), str.end());
        s.push_back(0); // add virtual sentinel

        strings_type::range_type range;

        strings_type::lrs(s, range);

        if(substr.empty() && str.size() > range.second)
        {
            substr = str.substr(range.first, range.second);
            //std::wcout << substr << L":" << range.first << std::endl;
        }

        if(substr.empty())
        {
            break;
        }

        //std::wcout << range.first << L":" << range.second << std::endl;
        //std::wcout << substr << std::endl;

again:
        auto k = 0;

        auto offset = str.find(substr, 0);

        while(offset != std::string::npos)
        {
            //std::wcout << substr << L":" << offset << std::endl;
            offset = str.find(substr, offset + substr.size());
            k++;
        }

        if(k <= 1)
        {
            substr.erase(substr.size() - 1, 1);

            if(substr.size() >= 8)
            {
                goto again;
            }
        }

        offset = str.find(substr, 0);

        while(offset != std::string::npos)
        {
            std::wcout << substr << L":" << offset << L":" << str.size() << std::endl;
            str.erase(offset, substr.size());
            offset = str.find(substr, offset);
            total++;
        }

        if(substr.size() < 8)
        {
            substr.clear();
        }

        if(str.size() < 32)
        {
            break;
        }
    }

    std::wcout << str << L":" << str.size() << std::endl;
}

void test_suffix_array()
{
    //string_type str(L"cabbage");
    //string_type str(L"banana");
    string_type str(L"ABRACADABRA");

    std::vector<char_type> s(str.begin(), str.end());
    s.push_back(0); // add virtual sentinel

    struct sa_traits
    {
        static int abc_size()
        {
            return 255;
        }
    };

    using traits_type = sa_traits;

    const int count = 1;

    {
        auto start = std::chrono::high_resolution_clock::now();

        for(int i = 0; i < count; i++)
        {
            std::vector<int> naive_sa;
            std::vector<int> prefixes;

            suffix_array<char_type, traits_type>::build(s, naive_sa, suffix_array<char_type, traits_type>::algorithm::naive);
            suffix_array<char_type, traits_type>::print(s, naive_sa, prefixes);
        }

        auto end = std::chrono::high_resolution_clock::now();
        auto milliseconds = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
        auto seconds = std::chrono::duration_cast<std::chrono::seconds>(end - start);

        std::wcout << std::endl << L"Naive time is " << milliseconds.count() << L"(ms), " << seconds.count() << L"(s)" << std::endl;
    }

    std::cout << std::endl;

    {
        auto start = std::chrono::high_resolution_clock::now();

        for(int i = 0; i < count; i++)
        {
            std::vector<int> suffixes;
            std::vector<int> prefixes;

            suffix_array<char_type, traits_type>::build(s, suffixes);
            suffix_array<char_type, traits_type>::lcp(s, suffixes, prefixes);
            suffix_array<char_type, traits_type>::print(s, suffixes, prefixes);
        }

        auto end = std::chrono::high_resolution_clock::now();
        auto milliseconds = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
        auto seconds = std::chrono::duration_cast<std::chrono::seconds>(end - start);

        std::wcout << std::endl << L"SA-IS time is " << milliseconds.count() << L"(ms), " << seconds.count() << L"(s)" << std::endl;
    }
}

void test_permutation()
{
    using permutation_type = permutation<int>;
    
    permutation_type::elements_type permutation;

    permutation.emplace_back(3);
    permutation.emplace_back(6);
    permutation.emplace_back(1);
    permutation.emplace_back(2);
    permutation.emplace_back(5);
    permutation.emplace_back(4);
    permutation.emplace_back(7);
    permutation.emplace_back(0);

    for(permutation_type::index_type k = 0; k < 1000; k++)
        std::next_permutation(permutation.begin(), permutation.end());

    permutation_type::rank_type rank = permutation_type::rank(permutation);
    std::cout << rank << std::endl;

    permutation_type::elements_type permutation2;
    permutation_type::unrank(rank, (permutation_type::size_type)permutation.size(), permutation2);

    for(auto element : permutation)
    {
        std::wcout << char_type(element + 48) << L' ';
    }
    std::wcout << std::endl;

    for(auto element : permutation2)
    {
        std::wcout << char_type(element + 48) << L' ';
    }
    std::wcout << std::endl;

    //permutation_type::multiset_elements_type multiset = { 0, 0, 0, 1, 1, 2, 2, 0, 0, 0, 1, 1, 2, 2 }; // 1474650
    //permutation_type::multiset_elements_type multiset_domain = { 0, 1, 2, 3};

    permutation_type::multiset_elements_type multiset = { 1, 2, 3, 1, 3, 0, 2, 1, 1, 0, 3, 2, 1, 0, 1, 2 }; // 1841909318
    permutation_type::multiset_elements_type multiset_domain = { 0, 1, 2, 3 };

    permutation_type::rank_type multiset_rank = permutation_type::rank_multiset(multiset, multiset_domain);

    std::wcout << multiset_rank << std::endl;

    permutation_type::multiset_elements_type multiset0;

    permutation_type::unrank_multiset(multiset_rank, multiset_domain, static_cast<permutation_type::size_type>(multiset.size()), multiset0);

    std::wcout << (multiset == multiset0) << std::endl;

    auto count = 0; //std::numeric_limits<permutation_type::rank_type>::max() - 1;

    for(auto i = 0; i < count; i++)
    {
        permutation_type::multiset_elements_type ms;
        
        permutation_type::unrank_multiset(i, multiset_domain, 16, ms);
        permutation_type::rank_type ms_rank = permutation_type::rank_multiset(ms, multiset_domain);

        for(auto element : ms)
        {
            std::wcout << char_type(element + 48) << L' ';
        }

        std::wcout << std::endl;

        if(ms_rank != i)
        {
            std::wcout << L"Zopa: " << i << std::endl;
            break;
        }
    }

    permutation_type::multiset_elements_type ms { 3, 4, 5, 1, 1, 2 };

    std::vector<permutation_type::elements_type> permutations;

    {
        auto start = std::chrono::high_resolution_clock::now();
        permutation_type::generate_multiset_permutation(ms, permutations);
        auto end = std::chrono::high_resolution_clock::now();
        auto milliseconds = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
        auto seconds = std::chrono::duration_cast<std::chrono::seconds>(end - start);
        std::wcout << std::endl << L"generate_multiset_permutation " << milliseconds.count() << L"(ms), " << seconds.count() << L"(s)" << std::endl;
        std::wcout << permutations.size() << std::endl;
    }

    for(auto permutation : permutations)
    {
        for(auto element : permutation)
        {
            std::wcout << char_type(element + 48) << L' ';
        }

        std::wcout << std::endl;
    }

    std::size_t k = 0;

    {
        auto start = std::chrono::high_resolution_clock::now();
        for(auto multiset : permutation_type::generate_multiset_permutation_lazy(ms))
        {
            if(permutations[k++] != multiset)
            {
                std::wcout << L"zopa" << std::endl;
                break;
            }

            //for(auto element : multiset)
            //{
            //    std::wcout << char_type(element + 48) << L' ';
            //}

            //std::wcout << std::endl;
        }
        auto end = std::chrono::high_resolution_clock::now();
        auto milliseconds = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
        auto seconds = std::chrono::duration_cast<std::chrono::seconds>(end - start);
        std::wcout << std::endl << L"generate_multiset_permutation_lazy " << milliseconds.count() << L"(ms), " << seconds.count() << L"(s)" << std::endl;
    }

    std::wcout << k << std::endl;
}

void test_merge_sort()
{
    using container_type = std::vector<int>;

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    auto count = 10000;

    auto start = std::chrono::high_resolution_clock::now();

    while(count > 0)
    {
        if(count % 1000 == 0)
            std::wcout << count << std::endl;

        count--;

        std::vector<int> elements;

        for(int k = 0; k < count; k++)
        {
            elements.emplace_back(std::rand());
        }

        merge<container_type::iterator, std::less<int>>::sort(elements.begin(), elements.end(), std::less<int>());
        //merge<container_type::iterator, std::less<int>>::sort(++elements.begin(), --elements.end(), std::less<int>());

        if(!std::is_sorted(elements.begin(), elements.end()))
        {
            std::wcout << L"ERROR!!!";
        }
        else
        {
            //for(auto element : elements)
            //{
            //    std::wcout << element << L' ';
            //}
        }
    }

    auto end = std::chrono::high_resolution_clock::now();
    auto milliseconds = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
    auto seconds = std::chrono::duration_cast<std::chrono::seconds>(end - start);

    std::wcout << std::endl << L"Time is " << milliseconds.count() << L"(ms), " << seconds.count() << L"(s)" << std::endl;

    std::wcout << std::endl;
}

void test_insertion_sort()
{
    using container_type = std::vector<int>;

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    auto count = 10000;

    auto start = std::chrono::high_resolution_clock::now();

    while(count > 0)
    {
        if(count % 1000 == 0)
            std::wcout << count << std::endl;

        count--;

        std::vector<int> elements;

        for(int k = 0; k < count; k++)
        {
            elements.emplace_back(std::rand());
        }

        insertion<container_type::iterator, std::less<int>>::sort(elements.begin(), elements.end(), std::less<int>());

        if(!std::is_sorted(elements.begin(), elements.end()))
        {
            std::wcout << L"ERROR!!!";
        }
        else
        {
            //for(auto element : elements)
            //{
            //    std::wcout << element << L' ';
            //}
        }
    }

    auto end = std::chrono::high_resolution_clock::now();
    auto milliseconds = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
    auto seconds = std::chrono::duration_cast<std::chrono::seconds>(end - start);

    std::wcout << std::endl << L"Time is " << milliseconds.count() << L"(ms), " << seconds.count() << L"(s)" << std::endl;


    std::wcout << std::endl;
}

void test_topological_sort()
{
    graph<int> g;
}
